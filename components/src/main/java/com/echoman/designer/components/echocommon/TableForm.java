/**
 *
 */
package com.echoman.designer.components.echocommon;

import java.awt.Cursor;
import java.beans.PropertyEditor;
import java.beans.PropertyEditorSupport;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import com.echoman.designer.databasemanager.DBConnections;
import org.netbeans.api.db.explorer.DatabaseConnection;
import org.openide.util.Exceptions;

/**
 *
 * @author  david.morin
 */
public class TableForm extends javax.swing.JDialog {

    /** A return status code - returned if Cancel button has been pressed */
    public static final int RET_CANCEL = 0;
    /** A return status code - returned if OK button has been pressed */
    public static final int RET_OK = 1;
    public PropertyEditor editor = null;
    public String tableName = "";
    boolean bHaveAllEchoCols = false;
    boolean includeAllColumns = false;

    public TableForm(java.awt.Frame parent, boolean modal,
            PropertyEditorSupport editor, boolean multipleColumn,
            boolean includeAllColumns, boolean allowTableSelection) {
        this(parent, modal, editor);
        this.includeAllColumns = includeAllColumns;
        tableList.setEnabled(allowTableSelection);
    }

    public TableForm(java.awt.Frame parent, boolean modal,
            PropertyEditorSupport editor, boolean multipleColumn,
            boolean includeAllColumns, boolean allowTableSelection,
            String tableName) {
        this(parent, modal, editor, multipleColumn, includeAllColumns,
                allowTableSelection);
        this.tableName = tableName;
    }

    public TableForm(java.awt.Frame parent, boolean modal,
            PropertyEditorSupport editor, boolean multipleColumn,
            boolean includeAllColumns, boolean allowTableSelection,
            String tableName, String selectedColumns) {
        this(parent, modal, editor, multipleColumn, includeAllColumns,
                allowTableSelection, tableName);
        this.tableName = tableName;
    }

    /**
     * Creates new form TablesColumnsForm
     * @param parent
     * @param modal
     * @param editor
     */
    public TableForm(java.awt.Frame parent, PropertyEditorSupport editor,
            boolean allowTableSelection) {
        this(parent, true, editor);
        tableList.setEnabled(allowTableSelection);
    }
    /**
     * Creates new form TablesColumnsForm
     * @param parent
     * @param modal
     * @param editor
     */
    public TableForm(java.awt.Frame parent, boolean modal, PropertyEditorSupport editor) {
        super(parent, modal);
        this.editor = editor;
        initComponents();
        setLocationRelativeTo(null);
        setTitle("Select Table");
        tableList.setEnabled(true);
    }

    /**
     * @return the return status of this dialog - one of RET_OK or RET_CANCEL
     */
    public int getReturnStatus() {
        return returnStatus;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableList = new javax.swing.JList();
        btnCreateEchoDefCols = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(org.openide.util.NbBundle.getMessage(TableForm.class, "TableForm.title")); // NOI18N
        setAlwaysOnTop(true);
        setLocationByPlatform(true);
        setModal(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                AddTablesAndColumns(evt);
            }
        });

        okButton.setText(org.openide.util.NbBundle.getMessage(TableForm.class, "TableForm.okButton.text")); // NOI18N
        okButton.setEnabled(false);
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        cancelButton.setText(org.openide.util.NbBundle.getMessage(TableForm.class, "TableForm.cancelButton.text")); // NOI18N
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        tableList.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        tableList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tableList.setFocusCycleRoot(true);
        tableList.setName("tableList"); // NOI18N
        tableList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                selectItem(evt);
            }
        });
        tableList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                getTableColumns(evt);
            }
        });
        jScrollPane1.setViewportView(tableList);

        btnCreateEchoDefCols.setText(org.openide.util.NbBundle.getMessage(TableForm.class, "TableForm.btnCreateEchoDefCols.text")); // NOI18N
        btnCreateEchoDefCols.setToolTipText(org.openide.util.NbBundle.getMessage(TableForm.class, "TableForm.btnCreateEchoDefCols.toolTipText")); // NOI18N
        btnCreateEchoDefCols.setEnabled(false);
        btnCreateEchoDefCols.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doCreateEchoDefCols(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 317, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnCreateEchoDefCols)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                        .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cancelButton, okButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 396, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCreateEchoDefCols)
                    .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        if (this.editor != null) {
            this.editor.setAsText((String)tableList.getSelectedValue());
        }
        doClose(RET_OK);
    }//GEN-LAST:event_okButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        doClose(RET_CANCEL);
    }//GEN-LAST:event_cancelButtonActionPerformed

    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        doClose(RET_CANCEL);
    }//GEN-LAST:event_closeDialog

private void AddTablesAndColumns(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_AddTablesAndColumns

    this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
    try {
        DatabaseConnection con = DBConnections.getConnection();

        if (!(con == null)) {
            String selectedObject = "";
            DefaultListModel tableListModel = new DefaultListModel();
            String[] tableTypes = {"TABLE", "VIEW"};
            Connection conn = con.getJDBCConnection();
            if (!(conn == null)) {
                try {
                    DatabaseMetaData md = conn.getMetaData();
                    ResultSet rs = md.getTables(null, null, null, tableTypes);
                    while (rs.next()) {
                        tableListModel.addElement(rs.getString("TABLE_SCHEM") + "." + rs.getString("TABLE_NAME"));
                        if (tableName.equals(rs.getString("TABLE_SCHEM") + "." + rs.getString("TABLE_NAME"))) {
                            selectedObject = (String) tableListModel.get(tableListModel.size() - 1);
                        }
                    }
                    rs.close();
                    // This connection should not be closed here...it is controlled through the DatabaseExplorer
                    //conn.close();
                } catch (SQLException ex) {
                    Exceptions.printStackTrace(ex);
                }
            }
            tableList.setModel(tableListModel);
            if (selectedObject.equals("")) {
                tableList.setSelectedIndex(-1);
            } else {
                tableList.setSelectedValue(selectedObject, true);
            }
        }
    } finally {
        this.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }

}//GEN-LAST:event_AddTablesAndColumns

private void getTableColumns(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_getTableColumns
    boolean bHaveUid = false;
    boolean bHaveCreateUser = false;
    boolean bHaveTouchUser = false;
    boolean bHaveCreateDate = false;
    boolean bHaveTouchDate = false;
    boolean bHaveSomeEchoCols = false;
    bHaveAllEchoCols = false;

    DatabaseConnection con = DBConnections.getConnection();
    if (!(con == null)) {
        tableName = (String) ((JList) evt.getSource()).getSelectedValue();
        String colTableName = tableName.substring(tableName.indexOf('.') + 1);
        String colTableSchema = tableName.substring(0, tableName.indexOf('.'));
        Connection conn = con.getJDBCConnection();

        if (!(conn == null)) {
            try {
                DatabaseMetaData md = conn.getMetaData();

                ResultSet rsc = md.getColumns(null, colTableSchema, colTableName, null);
                while (rsc.next()) {
                    String colName = rsc.getString("COLUMN_NAME");
                    if (!bHaveUid) {
                        bHaveUid = colName.equals(colTableName);
                    }
                    if (!bHaveCreateUser) {
                        bHaveCreateUser = colName.equals("CreateUser");
                    }
                    if (!bHaveTouchUser) {
                        bHaveTouchUser = colName.equals("UpdateUser");
                    }
                    if (!bHaveCreateDate) {
                        bHaveCreateDate = colName.equals("CreateDate");
                    }
                    if (!bHaveTouchDate) {
                        bHaveTouchDate = colName.equals("UpdateDate");
                    }
//Ticket #301
//                    if (!bHaveLinkId) {
//                        bHaveLinkId = colName.equals("linkid_c");
//                    }
//                    if (bHaveUid && bHaveCreateUser && bHaveTouchUser && bHaveCreateDate && bHaveTouchDate && bHaveLinkId) {
                    if (bHaveUid && bHaveCreateUser && bHaveTouchUser && bHaveCreateDate && bHaveTouchDate) {
                        bHaveAllEchoCols = true;
                    }
//                    if (bHaveUid || bHaveCreateUser || bHaveTouchUser || bHaveCreateDate || bHaveTouchDate || bHaveLinkId) {
                    if (bHaveUid || bHaveCreateUser || bHaveTouchUser || bHaveCreateDate || bHaveTouchDate) {
                        bHaveSomeEchoCols = true;
                    }
                }
                rsc.close();
                // This connection should not be closed here...it is controlled through the DatabaseExplorer
                //conn.close();
            } catch (SQLException ex) {
                Exceptions.printStackTrace(ex);
            }
        }

        btnCreateEchoDefCols.setEnabled(!bHaveSomeEchoCols);
        //allow for tables that don't have all the echo cols
        //okButton.setEnabled(bHaveAllEchoCols && (isForm || (columnList.getSelectedIndices().length > 0)));
        okButton.setEnabled(tableList.getSelectedIndices().length > 0);
    }
}//GEN-LAST:event_getTableColumns

private void selectItem(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_selectItem
    if (evt.getClickCount() > 1) {
        okButton.doClick();
        //allow for tables that don't have all the echo cols
        //} else if (bHaveAllEchoCols && ((columnList.getSelectedValues().length > 0) || isForm)) {
    } else if (tableList.getSelectedValues().length > 0) {
        okButton.setEnabled(true);
    } else {
        okButton.setEnabled(false);
    }

}//GEN-LAST:event_selectItem

private void doCreateEchoDefCols(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doCreateEchoDefCols
    boolean error = false;
    DatabaseConnection con = DBConnections.getConnection();
    if (!(con == null)) {
        if (!(tableName.equals(""))) {
            Connection conn = con.getJDBCConnection();
            if (!(conn == null)) {
                this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                try {
                    try {
                        Statement stmt = conn.createStatement();
                        stmt.execute(EchoUtil.getAlterDefaultColumnQuery(tableName));
                        stmt.close();
                        tableList.setSelectedIndex(tableList.getSelectedIndex() - 1);
                        tableList.setSelectedIndex(tableList.getSelectedIndex() + 1);
                    } catch (SQLException ex) {
                        error = true;
                        JOptionPane.showMessageDialog(this, "There was an error adding the default Echo Columns." + "\n" + ex.getMessage());
                    }
                    if (!error) {
                        JOptionPane.showMessageDialog(this, "The Echo Default Columns were successfully added.");
                    }
                } finally {
                    this.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                }
            }
        }
    }
}//GEN-LAST:event_doCreateEchoDefCols


    /**
     *
     * @param retStatus
     */
    private void doClose(int retStatus) {
        returnStatus = retStatus;
        setVisible(false);
        dispose();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCreateEchoDefCols;
    private javax.swing.JButton cancelButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton okButton;
    private javax.swing.JList tableList;
    // End of variables declaration//GEN-END:variables
    private int returnStatus = RET_CANCEL;
}
