/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ColumnPropForm.java
 *
 * Created on Feb 21, 2011, 6:33:36 PM
 */
package com.echoman.designer.components.echocommon;

import java.awt.event.KeyEvent;
import java.beans.PropertyEditor;
import java.beans.PropertyEditorSupport;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.StringTokenizer;
import javax.swing.DefaultListModel;
import javax.swing.ListSelectionModel;
import com.echoman.designer.components.echocommon.TablesColumnsForm.DialogCloseListener;
import com.echoman.designer.components.echointerfaces.IEchoComponentNode;
import com.echoman.designer.components.echotable.EchoColumnData;
import com.echoman.designer.components.echotable.EchoTableNodeData;
import org.openide.nodes.Node;

public class ColumnPropForm extends javax.swing.JDialog {

    private DefaultListModel lstColModel = new DefaultListModel();
    private DefaultListModel lstSortModel = new DefaultListModel();
    public static final int RET_CANCEL = 0;
    public static final int RET_OK = 1;
    public static final String SORT_ASCENDING = "ASC";
    public static final String SORT_DESCENDING = "DESC";
    private int returnStatus = RET_CANCEL;
    private EchoTableNodeData nodeData = null;
    private PropertyEditor editor = null;
    private String selectedTableColumns = "";
    private String selectedCols = "";
    private String selectedTable = "";
    private boolean addedColumns = false;
    private String selectedCol = "";
    private String selectedSortCols = "";
    private LinkedHashMap<String, String> tableColumnHeaders = new LinkedHashMap<String, String>();
    private LinkedHashMap<String, String> tableColumnMasks = new LinkedHashMap<String, String>();
    private LinkedHashMap<String, String> sortColumnOrders = new LinkedHashMap<String, String>();

    /** Creates new form ColumnPropForm */
    public ColumnPropForm(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        initFields();
        this.setLocationRelativeTo(null);
    }

    public ColumnPropForm(java.awt.Frame parent, boolean modal, EchoTableNodeData nodeData) {
        this(parent, modal);
        this.nodeData = nodeData;
        loadColumnsModel(nodeData.getTable(), nodeData.getColumns(),
                nodeData.getTableColumns());
        loadSortModelFromNodeData(nodeData.getDefaultSortColumns());
    }

    public ColumnPropForm(java.awt.Frame parent, boolean modal, PropertyEditorSupport editor) {
        this(parent, modal);
        this.editor = editor;
        Node[] ary = JDesiWindowManager.getActiveDesignerPage().getMgr().getSelectedNodes();
        this.nodeData = (EchoTableNodeData) ((IEchoComponentNode) ary[0]).getNodeData();
        loadColumnsModel(nodeData.getTable(), nodeData.getColumns(),
                nodeData.getTableColumns());
        loadSortModelFromNodeData(nodeData.getDefaultSortColumns());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstCol = new javax.swing.JList();
        btnAddCol = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtHeader = new javax.swing.JTextField();
        lblMask = new javax.swing.JLabel();
        btnMask = new javax.swing.JButton();
        lblTbl = new javax.swing.JLabel();
        btnColUp = new javax.swing.JButton();
        bntColDn = new javax.swing.JButton();
        btnAddSort = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstSort = new javax.swing.JList();
        btnRemoveSort = new javax.swing.JButton();
        btnUp = new javax.swing.JButton();
        btnDn = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        rbAsc = new javax.swing.JRadioButton();
        rbDesc = new javax.swing.JRadioButton();
        jSeparator1 = new javax.swing.JSeparator();
        btnOk = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(org.openide.util.NbBundle.getMessage(ColumnPropForm.class, "ColumnPropForm.title")); // NOI18N
        setIconImage(null);
        setIconImages(null);
        setModal(true);
        setResizable(false);

        lstCol.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        lstCol.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstColValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(lstCol);

        btnAddCol.setText(org.openide.util.NbBundle.getMessage(ColumnPropForm.class, "ColumnPropForm.btnAddCol.text")); // NOI18N
        btnAddCol.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddColActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(ColumnPropForm.class, "ColumnPropForm.jPanel1.border.title"))); // NOI18N

        jLabel1.setText(org.openide.util.NbBundle.getMessage(ColumnPropForm.class, "ColumnPropForm.jLabel1.text")); // NOI18N

        txtHeader.setText(org.openide.util.NbBundle.getMessage(ColumnPropForm.class, "ColumnPropForm.txtHeader.text")); // NOI18N
        txtHeader.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtHeaderFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtHeaderFocusLost(evt);
            }
        });
        txtHeader.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtHeaderKeyPressed(evt);
            }
        });

        lblMask.setText(org.openide.util.NbBundle.getMessage(ColumnPropForm.class, "ColumnPropForm.lblMask.text")); // NOI18N

        btnMask.setText(org.openide.util.NbBundle.getMessage(ColumnPropForm.class, "ColumnPropForm.btnMask.text")); // NOI18N
        btnMask.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMaskActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(btnMask)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblMask)
                        .addGap(177, 177, 177))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtHeader, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtHeader, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnMask)
                    .addComponent(lblMask))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        lblTbl.setText(org.openide.util.NbBundle.getMessage(ColumnPropForm.class, "ColumnPropForm.lblTbl.text")); // NOI18N

        btnColUp.setText(org.openide.util.NbBundle.getMessage(ColumnPropForm.class, "ColumnPropForm.btnColUp.text")); // NOI18N
        btnColUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnColUpActionPerformed(evt);
            }
        });

        bntColDn.setText(org.openide.util.NbBundle.getMessage(ColumnPropForm.class, "ColumnPropForm.bntColDn.text")); // NOI18N
        bntColDn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntColDnActionPerformed(evt);
            }
        });

        btnAddSort.setText(org.openide.util.NbBundle.getMessage(ColumnPropForm.class, "ColumnPropForm.btnAddSort.text")); // NOI18N
        btnAddSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddSortActionPerformed(evt);
            }
        });

        lstSort.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        lstSort.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstSortValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(lstSort);

        btnRemoveSort.setText(org.openide.util.NbBundle.getMessage(ColumnPropForm.class, "ColumnPropForm.btnRemoveSort.text")); // NOI18N
        btnRemoveSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveSortActionPerformed(evt);
            }
        });

        btnUp.setText(org.openide.util.NbBundle.getMessage(ColumnPropForm.class, "ColumnPropForm.btnUp.text")); // NOI18N
        btnUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpActionPerformed(evt);
            }
        });

        btnDn.setText(org.openide.util.NbBundle.getMessage(ColumnPropForm.class, "ColumnPropForm.btnDn.text")); // NOI18N
        btnDn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDnActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(ColumnPropForm.class, "ColumnPropForm.jPanel2.border.title"))); // NOI18N

        buttonGroup1.add(rbAsc);
        rbAsc.setSelected(true);
        rbAsc.setText(org.openide.util.NbBundle.getMessage(ColumnPropForm.class, "ColumnPropForm.rbAsc.text")); // NOI18N
        rbAsc.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rbAscStateChanged(evt);
            }
        });

        buttonGroup1.add(rbDesc);
        rbDesc.setText(org.openide.util.NbBundle.getMessage(ColumnPropForm.class, "ColumnPropForm.rbDesc.text")); // NOI18N
        rbDesc.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rbDescStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(24, Short.MAX_VALUE)
                .addComponent(rbAsc)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbDesc)
                .addGap(17, 17, 17))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbAsc)
                    .addComponent(rbDesc))
                .addContainerGap(44, Short.MAX_VALUE))
        );

        btnOk.setText(org.openide.util.NbBundle.getMessage(ColumnPropForm.class, "ColumnPropForm.btnOk.text")); // NOI18N
        btnOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOkActionPerformed(evt);
            }
        });

        btnCancel.setText(org.openide.util.NbBundle.getMessage(ColumnPropForm.class, "ColumnPropForm.btnCancel.text")); // NOI18N
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, 0, 0, Short.MAX_VALUE)
                    .addComponent(lblTbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnColUp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(bntColDn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(btnAddCol, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnAddSort, javax.swing.GroupLayout.PREFERRED_SIZE, 149, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnRemoveSort, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnDn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnUp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 509, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(191, 191, 191)
                .addComponent(btnOk)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnCancel))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnCancel, btnOk});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddCol)
                    .addComponent(btnAddSort))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblTbl)
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGap(73, 73, 73)
                            .addComponent(btnColUp)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(bntColDn)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(btnRemoveSort)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                                .addComponent(btnUp)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnDn))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnOk)
                    .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnCancel, btnOk});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddColActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddColActionPerformed

        final TablesColumnsForm tcf;
        if ("".equals(selectedCols)) {
            // This call is when you select the columns for a table the first time.
            tcf = new TablesColumnsForm(null, true, null, "");
        } else {
            // This is called once columns have been selected.
            tcf = new TablesColumnsForm(null, true, null, true,
                    true, false, selectedTable,
                    selectedCols, "");
        }
        tcf.addDialogCloseListener(new DialogCloseListener() {

            @Override
            public void onClose(String selectedColumns) {
                if (tcf.getReturnStatus() == TablesColumnsForm.RET_OK) {
                    loadColumnsModel(selectedColumns);
                }
            }
        });
        tcf.setVisible(true);
    }//GEN-LAST:event_btnAddColActionPerformed

    private void loadSortModelFromNodeData(String sortCols) {
        selectedSortCols = sortCols;
        if (!sortCols.equals("")) {
            StringTokenizer allTokens = new StringTokenizer(sortCols, ",");
            while (allTokens.hasMoreTokens()) {
                StringTokenizer colTokens = new StringTokenizer(allTokens.nextToken());
                String col = colTokens.nextToken().trim();
                lstSortModel.addElement(col);
                if (colTokens.hasMoreTokens()) {
                    sortColumnOrders.put(col, SORT_DESCENDING);
                } else {
                    sortColumnOrders.put(col, SORT_ASCENDING);
                }
            }
        }
        if (!lstSortModel.isEmpty()) {
            lstSort.setSelectedIndex(0);
        }
        enabledPanel();
    }

    private void loadColumnsModel(String table, String columns,
            LinkedHashMap<String, EchoColumnData> colsData) {
        //Ticket #173
        selectedTableColumns = table;
        lstColModel.removeAllElements();
        selectedTable = table;
        lblTbl.setText("Table: " + table);
        if (!columns.equals("")) {
            StringTokenizer allTokens = new StringTokenizer(columns, ",");
            while (allTokens.hasMoreTokens()) {
                StringTokenizer colTokens = new StringTokenizer(allTokens.nextToken());
                String col = colTokens.nextToken().trim();
                selectedTableColumns = selectedTableColumns + ";" + col + " "
                        + nodeData.getDataType(col);
                lstColModel.addElement(col);
            }
        }
        for (EchoColumnData coldata : colsData.values()) {
            tableColumnHeaders.put(coldata.getColName(), coldata.getHeader());
            tableColumnMasks.put(coldata.getColName(), coldata.getMask());
        }
        if (!lstColModel.isEmpty()) {
            lstCol.setSelectedIndex(0);
        }
        enabledPanel();
    }

    private void loadColumnsModel(String selectedColumns) {
        addedColumns = true;
        selectedTableColumns = selectedColumns;
        selectedCols = "";
        //Ticket #211 store the order of current list
        List<String> cols = new ArrayList<String>();
        List<String> colOrders = new ArrayList<String>();
        for (int i = 0; i < lstColModel.getSize(); i++) {
            colOrders.add(lstColModel.getElementAt(i).toString());
        }

        lblTbl.setText("Table: ");
        if (!selectedColumns.equals("") && (selectedColumns.indexOf(";") != -1)) {
            ArrayList<String> values = new ArrayList<String>();
            selectedTable = selectedColumns.substring(0, selectedColumns.indexOf(";"));
            lblTbl.setText("Table: " + selectedTable);
            String tableColumns = selectedColumns.substring(selectedColumns.indexOf(";") + 1, selectedColumns.length());
            if (!tableColumns.equals("")) {
                StringTokenizer allTokens = new StringTokenizer(tableColumns, ";");
                while (allTokens.hasMoreTokens()) {
                    StringTokenizer colTokens = new StringTokenizer(allTokens.nextToken());
                    values.clear();
                    while (colTokens.hasMoreTokens()) {
                        values.add(colTokens.nextToken());
                    }
                    String justColumns = values.get(0).trim();
                    cols.add(justColumns);
                    if (!tableColumnHeaders.containsKey(justColumns)) {
                        tableColumnHeaders.put(justColumns, justColumns);
                    }
                }
            }
        }
        lstColModel.removeAllElements();
        if (!cols.isEmpty()) {
            for (String s : colOrders) {
                if (cols.contains(s)) {
                    lstColModel.addElement(s);
                    if (!"".equals(selectedCols)) {
                        selectedCols = selectedCols + ", ";
                    }
                    selectedCols = selectedCols + s;
                }
            }
            for (String s : cols) {
                if (!colOrders.contains(s)) {
                    lstColModel.addElement(s);
                    if (!"".equals(selectedCols)) {
                        selectedCols = selectedCols + ", ";
                    }
                    selectedCols = selectedCols + s;
                }
            }
            lstCol.setSelectedIndex(0);
        }


        enabledPanel();
    }

    private void loadSortModel(String selectedColumns) {
        selectedSortCols = "";
        //Ticket #211 store the order of current list
        List<String> cols = new ArrayList<String>();
        List<String> colOrders = new ArrayList<String>();
        for (int i = 0; i < lstSortModel.getSize(); i++) {
            colOrders.add(lstSortModel.getElementAt(i).toString());
        }

        if (!selectedColumns.equals("") && (selectedColumns.indexOf(";") != -1)) {
            ArrayList<String> values = new ArrayList<String>();
            String tableColumns = selectedColumns.substring(selectedColumns.indexOf(";") + 1, selectedColumns.length());
            if (!tableColumns.equals("")) {
                StringTokenizer allTokens = new StringTokenizer(tableColumns, ";");
                while (allTokens.hasMoreTokens()) {
                    StringTokenizer colTokens = new StringTokenizer(allTokens.nextToken());
                    values.clear();
                    while (colTokens.hasMoreTokens()) {
                        values.add(colTokens.nextToken());
                    }
                    String justColumns = values.get(0).trim();
                    cols.add(justColumns);
                    sortColumnOrders.put(justColumns, SORT_ASCENDING);
                }
            }
        }
        lstSortModel.removeAllElements();
        if (!cols.isEmpty()) {
            for (String s : colOrders) {
                if (cols.contains(s)) {
                    lstSortModel.addElement(s);
                    if (!"".equals(selectedSortCols)) {
                        selectedSortCols = selectedSortCols + ", ";
                    }
                    selectedSortCols = selectedSortCols + s;
                }
            }
            for (String s : cols) {
                if (!colOrders.contains(s)) {
                    lstSortModel.addElement(s);
                    if (!"".equals(selectedSortCols)) {
                        selectedSortCols = selectedSortCols + ", ";
                    }
                    selectedSortCols = selectedSortCols + s;
                }
            }
            lstSort.setSelectedIndex(0);
        }
        enabledPanel();
    }

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        doClose(RET_CANCEL);
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOkActionPerformed
        //build a list of selected columns to determine column order
        Map<String, String> cols = new HashMap<String, String>();
        String tableName = "";
        if (!selectedTableColumns.equals("") && (selectedTableColumns.indexOf(";") != -1)) {
            tableName = selectedTableColumns.substring(0, selectedTableColumns.indexOf(";"));
            String tableColumns = selectedTableColumns.substring(selectedTableColumns.indexOf(";")
                    + 1, selectedTableColumns.length());
            if (!tableColumns.equals("")) {
                StringTokenizer allTokens = new StringTokenizer(tableColumns, ";");
                while (allTokens.hasMoreTokens()) {
                    String colinfo = allTokens.nextToken();
                    StringTokenizer colTokens = new StringTokenizer(colinfo);
                    String colname = "";
                    while (colTokens.hasMoreTokens()) {
                        colname = colTokens.nextToken().trim();
                        break;
                    }
                    cols.put(colname, colinfo);
                }
            }
        }
        if (addedColumns) {
            LinkedHashMap<String, EchoColumnData> tmpcols = new LinkedHashMap<String, EchoColumnData>();
            for (Entry<String, EchoColumnData> e : nodeData.getTableColumns().entrySet()) {
                tmpcols.put(e.getKey().toString(), e.getValue());
            }
            nodeData.getTableColumns().clear();
            StringBuilder selCols = new StringBuilder(tableName);
            for (int i = 0; i < lstColModel.size(); i++) {
                String col = lstColModel.getElementAt(i).toString();
                selCols.append(";");
                selCols.append(cols.get(col));
            }
            if (this.editor == null) {
                nodeData.setColumns(selCols.toString());
            } else {
                this.editor.setAsText(selCols.toString());
            }
            for (Entry<String, EchoColumnData> e : nodeData.getTableColumns().entrySet()) {
                EchoColumnData ecd = tmpcols.get(e.getKey());
                if (ecd != null) {
                    e.getValue().copy(ecd);
                }
            }

        }
        for (int i = 0; i < lstColModel.size(); i++) {
            String col = lstColModel.getElementAt(i).toString();
            EchoColumnData coldata = nodeData.getTableColumns().get(col);
            if (coldata != null) {
                coldata.setHeader(tableColumnHeaders.get(col));
                String mask = tableColumnMasks.get(col);
                if (mask == null)
                    coldata.setMask("");
                else
                    coldata.setMask(mask);
            }
        }
        nodeData.createNewColumns();
        StringBuilder sortCols = new StringBuilder();
        for (int i = 0; i < lstSortModel.size(); i++) {
            if (!"".equals(sortCols.toString())) {
                sortCols.append(", ");
            }
            String col = lstSortModel.getElementAt(i).toString();
            String sort = sortColumnOrders.get(col);
            sortCols.append(col);
            if (SORT_DESCENDING.equals(sort)) {
                sortCols.append(" ");
                sortCols.append(SORT_DESCENDING);
            }
        }
        nodeData.setDefaultSortColumns(sortCols.toString());
        doClose(RET_OK);
    }//GEN-LAST:event_btnOkActionPerformed

    private void btnAddSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddSortActionPerformed

        final TablesColumnsForm tcf = new TablesColumnsForm(null, true, null, true,
                true, false, selectedTable,
                //Ticket #178
                selectedSortCols, "");
        tcf.addDialogCloseListener(new DialogCloseListener() {

            @Override
            public void onClose(String selectedColumns) {
                if (tcf.getReturnStatus() == TablesColumnsForm.RET_OK) {
                    loadSortModel(selectedColumns);
                }
            }
        });
        tcf.setVisible(true);
    }//GEN-LAST:event_btnAddSortActionPerformed

    private void btnUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpActionPerformed
        int idx = lstSort.getSelectedIndex();
        if (idx > 0) {
            int nextIdx = idx - 1;
            if ((nextIdx > -1) && (nextIdx < lstSortModel.size())) {
                Object o = lstSortModel.getElementAt(idx);
                Object nexto = lstSortModel.getElementAt(nextIdx);
                lstSortModel.setElementAt(o, nextIdx);
                lstSortModel.setElementAt(nexto, idx);
                lstSort.setSelectedIndex(nextIdx);
            }
        }
    }//GEN-LAST:event_btnUpActionPerformed

    private void btnDnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDnActionPerformed
        int idx = lstSort.getSelectedIndex();
        if ((idx > -1) && (idx < lstSortModel.size())) {
            int nextIdx = idx + 1;
            if ((nextIdx > -1) && (nextIdx < lstSortModel.size())) {
                Object o = lstSortModel.getElementAt(idx);
                Object nexto = lstSortModel.getElementAt(nextIdx);
                lstSortModel.setElementAt(o, nextIdx);
                lstSortModel.setElementAt(nexto, idx);
                lstSort.setSelectedIndex(nextIdx);
            }
        }
    }//GEN-LAST:event_btnDnActionPerformed

    private void lstColValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstColValueChanged
        Object o = lstCol.getSelectedValue();
        if (o != null) {
            //Ticket #196
            //Lost focus is triggered after this event
            //check to see if there is any change to the header text
            //and set it before replacing the text with the new selected column
            if (!"".equals(selectedCol)) {
                tableColumnHeaders.put(selectedCol, txtHeader.getText());
                selectedCol = "";
            }
            txtHeader.setText(tableColumnHeaders.get(o.toString()));
            String mask = tableColumnMasks.get(o.toString());
            if (mask == null)
                lblMask.setText("");
            else
                lblMask.setText(mask);
        }
    }//GEN-LAST:event_lstColValueChanged

    private void lstSortValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstSortValueChanged
        Object o = lstSort.getSelectedValue();
        if (o != null) {
            if (sortColumnOrders.get(o.toString()).equals(SORT_DESCENDING)) {
                rbDesc.setSelected(true);
            } else {
                rbAsc.setSelected(true);
            }
        }
    }//GEN-LAST:event_lstSortValueChanged

    private void rbAscStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rbAscStateChanged
        Object o = lstSort.getSelectedValue();
        if (o != null) {
            if (rbAsc.isSelected()) {
                sortColumnOrders.put(o.toString(), SORT_ASCENDING);
            }
        }
    }//GEN-LAST:event_rbAscStateChanged

    private void rbDescStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rbDescStateChanged
        Object o = lstSort.getSelectedValue();
        if (o != null) {
            if (rbDesc.isSelected()) {
                sortColumnOrders.put(o.toString(), SORT_DESCENDING);
            }
        }
    }//GEN-LAST:event_rbDescStateChanged

    private void txtHeaderFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtHeaderFocusLost
        if (!"".equals(selectedCol)) {
            tableColumnHeaders.put(selectedCol, txtHeader.getText());
            selectedCol = "";
        }
    }//GEN-LAST:event_txtHeaderFocusLost

    private void txtHeaderKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtHeaderKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            Object o = lstCol.getSelectedValue();
            if (o != null) {
                tableColumnHeaders.put(o.toString(), txtHeader.getText());
            }
        }
    }//GEN-LAST:event_txtHeaderKeyPressed

    private void btnColUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnColUpActionPerformed
        int idx = lstCol.getSelectedIndex();
        if (idx > 0) {
            int nextIdx = idx - 1;
            if ((nextIdx > -1) && (nextIdx < lstColModel.size())) {
                Object o = lstColModel.getElementAt(idx);
                Object nexto = lstColModel.getElementAt(nextIdx);
                lstColModel.setElementAt(o, nextIdx);
                lstColModel.setElementAt(nexto, idx);
                lstCol.setSelectedIndex(nextIdx);
                addedColumns = true;
            }
        }
    }//GEN-LAST:event_btnColUpActionPerformed

    private void bntColDnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntColDnActionPerformed
        int idx = lstCol.getSelectedIndex();
        if ((idx > -1) && (idx < lstColModel.size())) {
            int nextIdx = idx + 1;
            if ((nextIdx > -1) && (nextIdx < lstColModel.size())) {
                Object o = lstColModel.getElementAt(idx);
                Object nexto = lstColModel.getElementAt(nextIdx);
                lstColModel.setElementAt(o, nextIdx);
                lstColModel.setElementAt(nexto, idx);
                lstCol.setSelectedIndex(nextIdx);
                addedColumns = true;
            }
        }
    }//GEN-LAST:event_bntColDnActionPerformed

    private void txtHeaderFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtHeaderFocusGained
        Object o = lstCol.getSelectedValue();
        if (o == null) {
            selectedCol = "";
        } else {
            selectedCol = o.toString();
        }
    }//GEN-LAST:event_txtHeaderFocusGained

    private void btnRemoveSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveSortActionPerformed
        Object o = lstSort.getSelectedValue();
        if (o != null) {
            selectedCol = o.toString();
            lstSortModel.removeElement(selectedCol);
            sortColumnOrders.remove(selectedCol);

            selectedSortCols = "";
            for (int i = 0; i < lstSortModel.getSize(); i++) {
                String s = lstSortModel.getElementAt(i).toString();
                if (!"".equals(selectedSortCols)) {
                    selectedSortCols = selectedSortCols + ", ";
                }
                selectedSortCols = selectedSortCols + s;
            }
        }
    }//GEN-LAST:event_btnRemoveSortActionPerformed

    private void btnMaskActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMaskActionPerformed
        InputMaskForm form = new InputMaskForm(null, lblMask.getText()) {

            @Override
            public void doAcceptValue(String mask) {
                Object o = lstCol.getSelectedValue();
                if (o != null) {
                    lblMask.setText(mask);
                    tableColumnMasks.put(o.toString(), mask);
                }
            }

        };
        form.setVisible(true);
    }//GEN-LAST:event_btnMaskActionPerformed

    private void doClose(int retStatus) {
        returnStatus = retStatus;
        setVisible(false);
        dispose();
    }

    public int getReturnStatus() {
        return returnStatus;
    }

    private void enabledPanel() {
        txtHeader.setEnabled(!lstColModel.isEmpty());
        btnMask.setEnabled(txtHeader.isEnabled());
        btnAddSort.setEnabled(txtHeader.isEnabled());
        rbAsc.setEnabled(!lstSortModel.isEmpty());
        rbDesc.setEnabled(rbAsc.isEnabled());
        btnUp.setEnabled(rbAsc.isEnabled());
        btnDn.setEnabled(rbAsc.isEnabled());
        btnRemoveSort.setEnabled(rbAsc.isEnabled());
        btnColUp.setEnabled(txtHeader.isEnabled());
        bntColDn.setEnabled(txtHeader.isEnabled());
    }

    private void initFields() {
        txtHeader.setEnabled(false);
        btnMask.setEnabled(false);
        lblMask.setText("");
        lstCol.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        lstCol.setModel(lstColModel);
        lstSort.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        lstSort.setModel(lstSortModel);
        btnAddSort.setEnabled(false);
        rbAsc.setEnabled(false);
        rbDesc.setEnabled(false);
        btnUp.setEnabled(false);
        btnDn.setEnabled(false);
        btnRemoveSort.setEnabled(false);
        btnColUp.setEnabled(false);
        bntColDn.setEnabled(false);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bntColDn;
    private javax.swing.JButton btnAddCol;
    private javax.swing.JButton btnAddSort;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnColUp;
    private javax.swing.JButton btnDn;
    private javax.swing.JButton btnMask;
    private javax.swing.JButton btnOk;
    private javax.swing.JButton btnRemoveSort;
    private javax.swing.JButton btnUp;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblMask;
    private javax.swing.JLabel lblTbl;
    private javax.swing.JList lstCol;
    private javax.swing.JList lstSort;
    private javax.swing.JRadioButton rbAsc;
    private javax.swing.JRadioButton rbDesc;
    private javax.swing.JTextField txtHeader;
    // End of variables declaration//GEN-END:variables
}
