/**
 *
 */
package com.echoman.designer.components.echocommon;

import java.awt.Color;
import java.awt.Font;
import java.beans.PropertyEditor;
import java.beans.PropertyEditorSupport;
import javax.swing.JTable;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.JTableHeader;

/**
 *
 * @author  david.morin
 */
public class DisplayMaskForm extends javax.swing.JDialog{
    /** A return status code - returned if Cancel button has been pressed */
    public static final int RET_CANCEL = 0;
    /** A return status code - returned if OK button has been pressed */
    public static final int RET_OK = 1;
    public PropertyEditor editor;

    /**
     * Creates new form TablesColumnsForm
     * @param parent
     * @param modal
     * @param editor
     */
    public DisplayMaskForm(java.awt.Frame parent, boolean modal, PropertyEditorSupport editor) {
        super(parent, modal);        
        this.editor = editor;
        initComponents();
        setLocationRelativeTo(null);
        JTableHeader listHeader = maskList.getTableHeader();
        listHeader.setOpaque(false);
        listHeader.setFont(new Font("Tahoma", Font.BOLD, 11));
        listHeader.setForeground(Color.white);
        listHeader.setBackground( new Color(127,157,185));
        maskList.setColumnSelectionAllowed(false);
        setCurrentMask();
    }

    private void setCurrentMask() {
        int idx = -1;
        String mask = this.editor.getAsText();
        if ((mask != null) && (!mask.equals(""))) {
            for (int i=0; i < maskList.getModel().getRowCount(); i++) {
                String rowMask = maskList.getModel().getValueAt(i, 1).toString();
                if (rowMask.equals(mask)) {
                    idx = i;
                    break;
                }
            }
        }
        if (idx == -1) {
            txtCustomMask.setText(mask);
        } else {
            maskList.setRowSelectionInterval(idx, idx);
        }
    }

    /**
     * 
     * @return the return status of this dialog - one of RET_OK or RET_CANCEL
     */
    public int getReturnStatus() {
        return returnStatus;
    }

    /**
     * 
     */
    public class SelectionListener implements ListSelectionListener {
        JTable table;
        int modelIndex;

        SelectionListener(JTable table) {
            this.table = table;
        }

        /**
         * 
         * @param e
         */
        @Override
        public void valueChanged(ListSelectionEvent e) {
            if ((table.getSelectedRow() >= 0) && (!e.getValueIsAdjusting()))
                if (table.equals(maskList)) {
                    if (!(table.getRowSorter() == null))
                        modelIndex = table.getRowSorter().convertRowIndexToModel(table.getSelectedRow());
                    else
                        modelIndex = table.getSelectedRow();
                }
          }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        maskList = new javax.swing.JTable() {
            public boolean isCellEditable(int row, int column)
            {
                return false;
            }
        };
        maskList.getSelectionModel().addListSelectionListener(new SelectionListener(maskList));
        jLabel1 = new javax.swing.JLabel();
        txtCustomMask = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Select Display Mask");
        setAlwaysOnTop(true);
        setBackground(java.awt.Color.white);
        setModal(true);
        setName("displaytMaskForm"); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        okButton.setText(org.openide.util.NbBundle.getMessage(DisplayMaskForm.class, "TablesColumnsForm.okButton.text")); // NOI18N
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        cancelButton.setText(org.openide.util.NbBundle.getMessage(DisplayMaskForm.class, "TablesColumnsForm.cancelButton.text")); // NOI18N
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        jScrollPane1.setOpaque(false);
        jScrollPane1.setPreferredSize(new java.awt.Dimension(441, 220));

        maskList.setBackground(javax.swing.UIManager.getDefaults().getColor("EditorPane.disabledBackground"));
        maskList.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        maskList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Short Date", "MM/dd/yyyy", "12-12-2009", "12/12/2009"},
                {"Long Date", "MMM dd, yyyy", "12-12-2009", "Dec 12, 2009"},
                {"Time", "hh:mm a", "12:12 ", "12:12 AM"},
                {"DateTime", "MM/dd/yyyy hh:mm a", "12-12-2009 12:30 a", "12/12/2009 12:30 AM"},
                {"Percent", "%", ".75", "75%"},
                {"Currency", "Money", "123456", "$1,234.56"},
                {"Uppercase", "Upper", "string", "STRING"},
                {"Lowercase", "Lower", "STRING", "string"}
            },
            new String [] {
                "Name", "Mask", "Value", "Result"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        maskList.setColumnSelectionAllowed(true);
        maskList.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        maskList.setDoubleBuffered(true);
        maskList.setMinimumSize(new java.awt.Dimension(30, 150));
        maskList.setOpaque(false);
        maskList.setPreferredSize(new java.awt.Dimension(0, 150));
        maskList.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(maskList);
        maskList.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (maskList.getColumnModel().getColumnCount() > 0) {
            maskList.getColumnModel().getColumn(0).setHeaderValue(org.openide.util.NbBundle.getMessage(DisplayMaskForm.class, "InputMaskForm.maskList.columnModel.title0")); // NOI18N
            maskList.getColumnModel().getColumn(1).setHeaderValue(org.openide.util.NbBundle.getMessage(DisplayMaskForm.class, "InputMaskForm.maskList.columnModel.title1")); // NOI18N
            maskList.getColumnModel().getColumn(2).setHeaderValue(org.openide.util.NbBundle.getMessage(DisplayMaskForm.class, "DisplayMaskForm.maskList.columnModel.title3")); // NOI18N
            maskList.getColumnModel().getColumn(3).setHeaderValue(org.openide.util.NbBundle.getMessage(DisplayMaskForm.class, "DisplayMaskForm.maskList.columnModel.title2")); // NOI18N
        }

        jLabel1.setText(org.openide.util.NbBundle.getMessage(DisplayMaskForm.class, "DisplayMaskForm.jLabel1.text")); // NOI18N

        txtCustomMask.setText(org.openide.util.NbBundle.getMessage(DisplayMaskForm.class, "DisplayMaskForm.txtCustomMask.text")); // NOI18N

        jTextArea1.setColumns(20);
        jTextArea1.setEditable(false);
        jTextArea1.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.setText("Example:\n\n(# number) #####-####: 12345-6789\n(? letter) ????: abcd or ABCD\n(A letter or number) AAAA: abcd or ABCD or 1234 or a1b2\n(U uppercase and L lowercase) ULULUULL: AbCdEFgh\n"); // NOI18N
        jTextArea1.setOpaque(false);
        jTextArea1.setRequestFocusEnabled(false);
        jScrollPane2.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 514, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 514, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtCustomMask, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(198, 198, 198)
                        .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cancelButton, okButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtCustomMask, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        if ((txtCustomMask.getText() == null) || (txtCustomMask.getText().equals(""))) {
            this.editor.setAsText((String)maskList.getValueAt(maskList.getSelectedRow(), 1));
        } else {
            this.editor.setAsText(txtCustomMask.getText());
        }
        doClose(RET_OK);
    }//GEN-LAST:event_okButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        doClose(RET_CANCEL);
    }//GEN-LAST:event_cancelButtonActionPerformed

    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        doClose(RET_CANCEL);
    }//GEN-LAST:event_closeDialog

    /**
     * 
     * @param retStatus
     */
    private void doClose(int retStatus) {
        returnStatus = retStatus;
        setVisible(false);
        dispose();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTable maskList;
    private javax.swing.JButton okButton;
    private javax.swing.JTextField txtCustomMask;
    // End of variables declaration//GEN-END:variables

    /**
     * 
     */
    private int returnStatus = RET_CANCEL;
}
